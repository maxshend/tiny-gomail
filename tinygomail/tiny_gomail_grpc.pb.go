// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package tinygomail

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// TinyGomailClient is the client API for TinyGomail service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TinyGomailClient interface {
	SendTextMessage(ctx context.Context, in *EmailMessage, opts ...grpc.CallOption) (*SendResponse, error)
	SendHTMLMessage(ctx context.Context, in *EmailMessage, opts ...grpc.CallOption) (*SendResponse, error)
}

type tinyGomailClient struct {
	cc grpc.ClientConnInterface
}

func NewTinyGomailClient(cc grpc.ClientConnInterface) TinyGomailClient {
	return &tinyGomailClient{cc}
}

func (c *tinyGomailClient) SendTextMessage(ctx context.Context, in *EmailMessage, opts ...grpc.CallOption) (*SendResponse, error) {
	out := new(SendResponse)
	err := c.cc.Invoke(ctx, "/tinygomail.TinyGomail/SendTextMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tinyGomailClient) SendHTMLMessage(ctx context.Context, in *EmailMessage, opts ...grpc.CallOption) (*SendResponse, error) {
	out := new(SendResponse)
	err := c.cc.Invoke(ctx, "/tinygomail.TinyGomail/SendHTMLMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TinyGomailServer is the server API for TinyGomail service.
// All implementations must embed UnimplementedTinyGomailServer
// for forward compatibility
type TinyGomailServer interface {
	SendTextMessage(context.Context, *EmailMessage) (*SendResponse, error)
	SendHTMLMessage(context.Context, *EmailMessage) (*SendResponse, error)
	mustEmbedUnimplementedTinyGomailServer()
}

// UnimplementedTinyGomailServer must be embedded to have forward compatible implementations.
type UnimplementedTinyGomailServer struct {
}

func (UnimplementedTinyGomailServer) SendTextMessage(context.Context, *EmailMessage) (*SendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendTextMessage not implemented")
}
func (UnimplementedTinyGomailServer) SendHTMLMessage(context.Context, *EmailMessage) (*SendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendHTMLMessage not implemented")
}
func (UnimplementedTinyGomailServer) mustEmbedUnimplementedTinyGomailServer() {}

// UnsafeTinyGomailServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TinyGomailServer will
// result in compilation errors.
type UnsafeTinyGomailServer interface {
	mustEmbedUnimplementedTinyGomailServer()
}

func RegisterTinyGomailServer(s grpc.ServiceRegistrar, srv TinyGomailServer) {
	s.RegisterService(&TinyGomail_ServiceDesc, srv)
}

func _TinyGomail_SendTextMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmailMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TinyGomailServer).SendTextMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tinygomail.TinyGomail/SendTextMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TinyGomailServer).SendTextMessage(ctx, req.(*EmailMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _TinyGomail_SendHTMLMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmailMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TinyGomailServer).SendHTMLMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tinygomail.TinyGomail/SendHTMLMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TinyGomailServer).SendHTMLMessage(ctx, req.(*EmailMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// TinyGomail_ServiceDesc is the grpc.ServiceDesc for TinyGomail service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TinyGomail_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tinygomail.TinyGomail",
	HandlerType: (*TinyGomailServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendTextMessage",
			Handler:    _TinyGomail_SendTextMessage_Handler,
		},
		{
			MethodName: "SendHTMLMessage",
			Handler:    _TinyGomail_SendHTMLMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tinygomail/tiny_gomail.proto",
}
